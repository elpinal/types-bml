type var = string

module Env :> sig
  type t
  type error

  val empty : t

  val show_error : error -> string

  module Term : sig
    val insert : t -> var -> Type.t -> t
    val lookup : t -> var -> result error Type.t
  end

  module Type : sig
    val insert : t -> TypeVar.t -> t
    val well_formed : t -> Type.t -> result Type.error unit
  end
end = struct
  module VarMap = Map.Make String

  type t = VarMap.t Type.t * TypeVar.Set.t

  val empty = (VarMap.empty, TypeVar.Set.empty)

  datatype error =
    | Unbound of var

  val show_error = function
    | Unbound v -> open Pretty in "unbound value variable:" <+> v
  end

  module Type = struct
    val insert (venv, tenv) v = (venv, TypeVar.Set.insert v tenv)

    val well_formed (_, tenv) ty = Type.well_formed tenv ty
  end

  module Term = struct
    val insert (venv, tenv) v ty = (VarMap.insert v ty venv, tenv)

    val lookup (venv, _) v =
      match VarMap.lookup v venv with
        | Some ty -> Ok ty
        | None    -> Err $ Unbound v
      end
  end
end
